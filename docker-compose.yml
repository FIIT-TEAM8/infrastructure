version: "3"

services:
  mongo_db:
    container_name: mongo_db
    env_file:
    - env/mongo_db.env
    image: fiitteam8/mongo_db
    ports:
    - 27017:27017
    volumes:
    - ./data_link/mongo_db:/data/db
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 5g

  scraper:
    container_name: scraper
    env_file:
    - env/scraper.env
    image: fiitteam8/news_scraper
    ports:
    - 6800:6800
    mem_limit: 4294967296
    restart: unless-stopped
  
  setup:
    container_name: es_setup
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - ./data_link/elastic/certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    env_file:
    - env/elastic.env

  es01:
    container_name: es01
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - ./data_link/elastic/certs:/usr/share/elasticsearch/config/certs
      - ./data_link/elastic/es01:/usr/share/elasticsearch/data
      - ./data_link/elastic/backup:/opt/elasticsearch/backup  
      - ./data_link/elastic/backup:/usr/share/elasticsearch/snapshot
    ports:
      - 9200:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - path.repo=/opt/elasticsearch/backup  
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - cluster.initial_master_nodes=es01,es02
      - discovery.seed_hosts=es02
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    env_file:
    - env/elastic.env
    restart: unless-stopped

  es02:
    container_name: es02
    depends_on:
      - es01
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - ./data_link/elastic/certs:/usr/share/elasticsearch/config/certs
      - ./data_link/elastic/es02:/usr/share/elasticsearch/data
      - ./data_link/elastic/backup:/opt/elasticsearch/backup
      - ./data_link/elastic/backup:/usr/share/elasticsearch/snapshot
    environment:
      - node.name=es02
      - cluster.name=${CLUSTER_NAME}
      - path.repo=/opt/elasticsearch/backup
      - cluster.initial_master_nodes=es01,es02
      - discovery.seed_hosts=es01
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es02/es02.key
      - xpack.security.http.ssl.certificate=certs/es02/es02.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es02/es02.key
      - xpack.security.transport.ssl.certificate=certs/es02/es02.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    env_file:
    - env/elastic.env
    restart: unless-stopped


  kibana:
    container_name: kibana
    depends_on:
      es01:
        condition: service_healthy
        #      es02:
        #        condition: service_healthy
        #      es03:
        #        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - ./data_link/elastic/certs:/usr/share/kibana/config/certs
      - ./data_link/elastic/kibana:/usr/share/kibana/data
    ports:
      - 5601:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    env_file:
    - env/kibana.env
    restart: unless-stopped
    


  certbot:
    image: certbot/certbot
    volumes:
      - ./data_link/certbot/conf:/etc/letsencrypt
      - ./data_link/certbot/www:/var/www/certbot
    # command to keep issuing new SSL certificats
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    restart: unless-stopped

  nginx:
    image: nginx:1.21.3
    # image: fiitteam8/nginx_amplify:latest
    container_name: nginx
    restart: always
    depends_on:
      - flask_server
      - mongo_express
    volumes:
      - ./data_link/nginx:/etc/nginx/conf.d
      - ./data_link/certbot/conf:/etc/letsencrypt
      - ./data_link/certbot/www:/var/www/certbot
      - ./data_link/nginx-static:/usr/share/nginx/html
      - ./data_link/nginx-auth/htpasswd:/etc/apache2/.htpasswd
    # reload nginx based on config
    # keep reloading nginx every 6h to acquire new ssl certificates
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    ports:
      - 80:80
      - 443:443
    env_file:
      - env/nginx_amplify.env
    restart: unless-stopped

  mongo_express:
    image: mongo-express
    container_name: mongo_express
    restart: always
    ports:
      - 8081:8081
    env_file:
      - env/mongo_express.env
 
  stats_server:
    image: fiitteam8/stats_server:latest
    container_name: stats_server
    env_file:
      - env/elastic_connection.env
    restart: unless-stopped

  flask_server:
    image: fiitteam8/flask_server:latest
    container_name: flask_server
    env_file:
      - env/flask.env
      - env/mongo_connection.env
      - env/elastic_connection.env
    ports:
      - 5000:5000
    restart: unless-stopped

  system_metrics:
    image: fiitteam8/system_metrics:latest
    container_name: system_metrics
    env_file:
      - env/system_metrics.env
      - env/mongo_connection.env
      - env/elastic_connection.env
    ports:
      - 5005:5005
    restart: unless-stopped

  frontend:
    image: fiitteam8/frontend:latest
    container_name: frontend
    hostname: frontend
    env_file:
      - env/frontend.env
    restart: unless-stopped

  scraping_scheduler:
    image: fiitteam8/scraping_scheduler
    container_name: scraping_scheduler
    env_file:
      - env/scraping_scheduler.env
    restart: unless-stopped

  documentation:
    container_name: documentation
    image: fiitteam8/ams_team_documentation:latest
    ports:
      - 9000:9000
    restart: unless-stopped

networks:
  default:
      name: adversea
